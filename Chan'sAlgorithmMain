# By Kostas Demiris
import math


def get_smallest_point(point_set):
    # Returns the right-most bottom point
    minimum = [-float('inf'), float('inf')]
    for point in point_set:
        if point[1] < minimum[1] or (point[1] == minimum[1] and point[0] > minimum[0]):
            minimum = point
    return minimum

def is_concave(a, b, c):
    return ((b[0] - a[0]) * (c[1] - a[1])) - ((b[1] - a[1]) * (c[0] - a[0])) > 0 

def cross_product(a, b, c):
    return ((b[0] - a[0]) * (c[1] - a[1])) - ((b[1] - a[1]) * (c[0] - a[0]))

def angle_to_positive(source, destination):
    # Finds the polar angle of the line between source to destination
    delta_x = destination[0] - source[0]
    delta_y = destination[1] - source[1]
    angle = math.atan2(delta_y, delta_x)
    if angle < 0:
        angle = 2 * math.pi + angle
    if delta_x == 0 and delta_y < 0:
        return (1.5) * math.pi
    if delta_y == 0 and delta_x < 0:
        return 2 * math.pi
    
    return angle

def graham_scan(point_set):
    initial_point = get_smallest_point(point_set)
    out_stack = []
    sorted_points = sorted(point_set, key=lambda point, initial_point = initial_point: angle_to_positive(initial_point, point))
    for point in sorted_points:
        while len(out_stack) >= 3 and not is_concave(out_stack[-2], out_stack[-1], point):
            # This way it also removes colinear points
            out_stack.pop(-1)
        out_stack.append(point)
        
    if len(out_stack) >= 3 and not is_concave(out_stack[0], out_stack[1], out_stack[2]):
        out_stack.pop(1)
    if len(out_stack) >= 3 and not is_concave(out_stack[-2], out_stack[-1], out_stack[0]):
        out_stack.pop(-1)
        
    return out_stack
# utility functions for chan's algorithm

def create_sub_hulls(point_set, k):
    # Just seperates the point set into k sized subset, and returns the convex hulls of those subsets
    sub_hulls = []
    i = 0
    while (k * (i+1) < len(point_set)):
        sub_hulls.append(graham_scan(point_set[(k*i): (k * (i+1))]))
        i+=1
    remainder = graham_scan(point_set[(k*i): min(k * (i+1), len(point_set)+1)])
    if len(remainder) > 0:
        sub_hulls.append(remainder)
    return sub_hulls

def is_right_tangent(external_point, mid_point, prev_point, next_point):
    # If these conditions are satisfied, we've found the right tangent
    return cross_product(external_point, mid_point, prev_point) >= 0 and cross_product(external_point, mid_point, next_point) >= 0

def right_most_tangent(source, poly):
    # https://gist.github.com/tixxit/252229 was the inspiration for this approach
    lower = 0; upper = len(poly)-1
    mid = (upper + lower)//2
        
    if len(poly) <= 2:
        # These are just the manual cases that we can get out of the way immediately by literally comparing them
        if len(poly) == 1:
            return poly[0]
        else:
            if cross_product(source, poly[0], poly[1]) > 0:
                return poly[0]
            elif cross_product(source, poly[0], poly[1]) == 0:
                return max([poly[0], poly[1]], key=lambda point, origin = source: distance(origin, point))
            else:
                return poly[1]
    
    left_prev = cross_product(source, poly[0],poly[-1]) >= 0
    left_next = cross_product(source, poly[0], poly[1]) >= 0 
        
    while lower < upper:
        mid = (upper + lower) // 2
        previous = is_concave(source, poly[mid], poly[(mid-1)%len(poly)])
        _next = is_concave(source, poly[mid], poly[(mid+1)%len(poly)])
        # Is concave basically checks if it "bends inwards" so to speak, which we check with cross product

        
        if poly[mid] == source:
            # Just by definition
            return poly[mid], poly[(mid+1)%len(poly)]
        
        if previous and _next:
            return poly[mid]    
        # While it is not the case that both points lie to the "left" of the line
    
        left_leaning = cross_product(source, poly[lower], poly[mid])
        # Depending on where the mid value lies, it means that when you move to the next point in the hull
        # it moves either left or right relative to the line between source and poly[mid]

        if is_right_tangent(source, poly[mid], poly[(mid-1)%len(poly)], poly[(mid+1)%len(poly)]):
            if poly[mid] == source:
                # just by definition
                return poly[(mid+1)%len(poly)]
            else:
                return poly[mid]
        
        if (left_leaning > 0 and ((not left_next) or left_prev==left_next)) or (left_leaning < 0 and not previous):
            upper = mid
        else:
            lower = mid + 1
            # This avoids the issue with odd numbers of points in sub_hull causing issues with the 
            # the whole integer division method.
            
            left_prev = is_concave(source, poly[lower], poly[(mid-1)%len(poly)])
            left_next = is_concave(source, poly[lower], poly[(lower+1)%len(poly)])  
            
    if poly[lower] == source:
        return poly[(mid+1)%len(poly)]
    if is_right_tangent(source, poly[upper], poly[(upper-1)%len(poly)], poly[(upper+1)%len(poly)]):
        return poly[upper]
    return poly[lower] 

def distance(a, b):
    return (((b[0] - a[0]) ** 2) + ((b[1] - a[1]) ** 2))

def get_subhull_index(subhulls, value):
    for sub_index in range(len(subhulls)):
        if value in subhulls[sub_index]:
            return sub_index
    return None
    
def find_smallest_tangent(source, sub_hulls, last_index):
    # this takes the tangent from the source to each subhull, and returns the smallest one
    current_best = sub_hulls[last_index][(sub_hulls[last_index].index(source) + 1) % len(sub_hulls[last_index])]
    # This excludes the current subhull from being considered in the usual calculation, instead just taking the
    # next point by definition of tangents and convex hulls.
    
    tangent_record = [current_best]
    subhull_index = last_index
    for sub_hull in [x for x in range(len(sub_hulls)) if x != last_index]:
        tangent_point = right_most_tangent(source, sub_hulls[sub_hull])
        if cross_product(source, current_best, tangent_point) < 0:
            current_best = tangent_point
            subhull_index = sub_hull
        elif cross_product(source, current_best, tangent_point) == 0 and distance(source, current_best) < distance(source, tangent_point):
            current_best = tangent_point
            subhull_index = sub_hull
    return (current_best, subhull_index)

# Chan's algorithm
def chansAlgorithm(points):
    n = len(points) - 1 
    if n > 1:
        k = max(round(math.sqrt(n)), 4)) 
        # If n <= 1, math.log throws an error
    else:
        return points
    # The size of the subsets we start of with. Ideal k is equal to h, the number of hull points.
    # k is started 
    first_point = get_smallest_point(points)
    
    while True:
        sub_hulls = create_sub_hulls(points, k)
        hull_points = [first_point]
        iterations_passed = 0       
        in_hull = dict()
        last_index = get_subhull_index(sub_hulls, first_point)
        
        while iterations_passed < (len(points) + 1):
            # the biggest convex hull possible has all points on it, so one with more points in the hull than the
            # input set is impossible
            tangent_point, last_index = find_smallest_tangent(hull_points[-1], sub_hulls, last_index)
            if tangent_point == first_point:
                # By definition, all convex hull points have been discovered so we can return the discovered ones
                return hull_points
            
            else:
                hull_points.append(tangent_point)
                if len(hull_points) >= 3 and cross_product(hull_points[-3], hull_points[-2], hull_points[-1]) == 0:
                    hull_points.pop(-2)
                if in_hull.get(tangent_point) != None:
                    iterations_passed = 2 * len(points)
                    # This drastically speeds up things for skipping smaller k steps, and checking retrieval is o(1)
                    in_hull[tangent_point] = "In"
                
            iterations_passed += 1
            
        k = min(k ** 2, len(points)) # Quickly grows to be at, or greater than, h. As suggested in his paper.
